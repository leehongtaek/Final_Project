DROP TABLE ASSIGNEE;
DROP TABLE TASK;
DROP TABLE BACKUP_TASK;
DROP TABLE BACKUP_ASSIGNEE;

DROP SEQUENCE TASK_SEQ;
DROP SEQUENCE ASSIGNEE_SEQ;

DROP TRIGGER TASK_DELETE_TRIGER;
DROP TRIGGER ASSIGNEE_DELETE_TRIGER;
DROP PROCEDURE TASK_ASSGINEE_DELETE_PROCEDURE;



CREATE TABLE TASK(
TASK_NUM NUMBER CONSTRAINT TASK_PK_NUM PRIMARY KEY, 
TASK_TITLE VARCHAR2(100) NOT NULL,  /*제목 크기 부족해서 100으로 변경 영어로 50자 한글로 약 30자  */
TASK_DESCRIPTION VARCHAR2(4000),
TASK_START DATE,
TASK_END DATE,
TASK_STATE CHAR(1) DEFAULT 'N',
TASK_ORGANIZER VARCHAR2(50),
TASK_DATE DATE
);
CREATE SEQUENCE TASK_SEQ
INCREMENT BY 1
START WITH 1;

CREATE TABLE ASSIGNEE(
ASSIGNEE_NUM NUMBER CONSTRAINT ASSIGNEE_NUM_PK PRIMARY KEY,
TASK_NUM NUMBER, 
ASSIGNEE_ASSIGNEE VARCHAR2(50),
ASSIGNEE_COMMENT VARCHAR2(4000),
ASSIGNEE_STATE CHAR(1) DEFAULT 'N',
CONSTRAINT TASK_NUM FOREIGN KEY(TASK_NUM) REFERENCES TASK(TASK_NUM)
);

CREATE SEQUENCE ASSIGNEE_SEQ
INCREMENT BY 1
START WITH 1;
-----





-- TASK DATA BACK_UP 할 테이블 만들기
-- 테이블 스키마만 복사해서 백업 테이블 생성
CREATE TABLE BACKUP_TASK
AS SELECT * FROM TASK WHERE 1!=1;

CREATE TABLE BACKUP_ASSIGNEE
AS SELECT * FROM ASSIGNEE WHERE 1!=1;

-- ASSIGNEE 삭제시 트리거
CREATE OR REPLACE TRIGGER ASSIGNEE_DELETE_TRIGER
BEFORE DELETE ON ASSIGNEE
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO BACKUP_ASSIGNEE
    VALUES(
    :OLD.ASSIGNEE_NUM,
    :OLD.TASK_NUM,
    :OLD.ASSIGNEE_ASSIGNEE,
    :OLD.ASSIGNEE_COMMENT,
    :OLD.ASSIGNEE_STATE);
END;
/
-- TASK 삭제시 트리거

CREATE OR REPLACE TRIGGER TASK_DELETE_TRIGER
BEFORE DELETE ON TASK
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO BACKUP_TASK
    VALUES (
    :OLD.TASK_NUM,
    :OLD.TASK_TITLE,
    :OLD.TASK_DESCRIPTION,
    :OLD.TASK_START,
    :OLD.TASK_END,
    :OLD.TASK_STATE,
    :OLD.TASK_ORGANIZER, 
    :OLD.TASK_DATE);
END;
/

-- TASK AND ASSIGNEE TABLE 동시 삭제 프로시져

CREATE OR REPLACE PROCEDURE TASK_ASSGINEE_DELETE_PROCEDURE
(
TASK_NUMV IN ASSIGNEE.ASSIGNEE_NUM%TYPE
)
  IS 

BEGIN
  -- ASSIGNEE 에 있는 테이블을 먼저 삭제하고
  DELETE
  FROM ASSIGNEE
  WHERE TASK_NUM= TASK_NUMV;
  -- TASK 에 있는 테이블을 삭제한다.
  DELETE FROM TASK
  WHERE TASK_NUM =TASK_NUMV;
END;
/

---------------------


COMMIT;